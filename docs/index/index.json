{"interfaceLanguages":{"swift":[{"children":[{"title":"Coders","type":"groupMarker"},{"children":[{"title":"Creating A Encoder","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cborencoder\/init(dateencodingstrategy:includecbortag:keysorter:userinfo:)","title":"init(dateEncodingStrategy: DateEncodingStrategy, includeCBORTag: Bool, keySorter: ((Any, Any) -> Bool)?, userInfo: [CodingUserInfoKey : Any])","type":"init"},{"title":"Configuring The Encoder","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cborencoder\/dateencodingstrategy-swift.property","title":"var dateEncodingStrategy: DateEncodingStrategy","type":"property"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cborencoder\/dateencodingstrategy-swift.enum\/rfc3339","title":"case rfc3339","type":"case"},{"path":"\/documentation\/cborcoding\/cborencoder\/dateencodingstrategy-swift.enum\/secondssince1970","title":"case secondsSince1970","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cborencoder\/dateencodingstrategy-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/cborcoding\/cborencoder\/dateencodingstrategy-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cborencoder\/dateencodingstrategy-swift.enum","title":"CBOREncoder.DateEncodingStrategy","type":"enum"},{"path":"\/documentation\/cborcoding\/cborencoder\/includecbortag","title":"var includeCBORTag: Bool","type":"property"},{"path":"\/documentation\/cborcoding\/cborencoder\/keysorter","title":"var keySorter: ((Any, Any) -> Bool)?","type":"property"},{"path":"\/documentation\/cborcoding\/cborencoder\/userinfo","title":"var userInfo: [CodingUserInfoKey : Any]","type":"property"},{"title":"Using The Encoder","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cborencoder\/encode(_:)","title":"func encode<T>(T) throws -> Data","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cborencoder\/output","title":"CBOREncoder.Output","type":"typealias"}],"path":"\/documentation\/cborcoding\/cborencoder\/toplevelencoder-implementations","title":"TopLevelEncoder Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cborencoder","title":"CBOREncoder","type":"class"},{"children":[{"title":"Creating A Decoder","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbordecoder\/init(userinfo:)","title":"init(userInfo: [CodingUserInfoKey : Any])","type":"init"},{"title":"Configuring The Decoder","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbordecoder\/userinfo","title":"var userInfo: [CodingUserInfoKey : Any]","type":"property"},{"title":"Using The Decoder","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbordecoder\/decode(_:from:)","title":"func decode<T>(T.Type, from: Data) throws -> T","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbordecoder\/input","title":"CBORDecoder.Input","type":"typealias"}],"path":"\/documentation\/cborcoding\/cbordecoder\/topleveldecoder-implementations","title":"TopLevelDecoder Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbordecoder","title":"CBORDecoder","type":"class"},{"title":"Custom Encoding","type":"groupMarker"},{"children":[{"title":"Creating Containers of Specific Lengths","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/cborcoding\/cborencoderprotocol\/indefinitelengthcontainercontext(includingsubcontainers:_:)-46exh","title":"func indefiniteLengthContainerContext<R>(includingSubcontainers: Bool, () throws -> R) rethrows -> R","type":"method"}],"title":"CBOREncoderProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/cborcoding\/cborencoderprotocol\/indefinitelengthcontainercontext(includingsubcontainers:_:)-7195t","title":"func indefiniteLengthContainerContext<R>(includingSubcontainers: Bool, () throws -> R) rethrows -> R","type":"method"},{"children":[{"children":[{"path":"\/documentation\/cborcoding\/cborencoderprotocol\/definitelengthcontainercontext(includingsubcontainers:_:)-58rd2","title":"func definiteLengthContainerContext<R>(includingSubcontainers: Bool, () throws -> R) rethrows -> R","type":"method"}],"title":"CBOREncoderProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/cborcoding\/cborencoderprotocol\/definitelengthcontainercontext(includingsubcontainers:_:)-4guss","title":"func definiteLengthContainerContext<R>(includingSubcontainers: Bool, () throws -> R) rethrows -> R","type":"method"}],"path":"\/documentation\/cborcoding\/cborencoderprotocol","title":"CBOREncoderProtocol","type":"protocol"},{"title":"CBOR Types","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/undefined\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/undefined\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/undefined\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/undefined\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/undefined","title":"CBOR.Undefined","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/init(rawvalue:)","title":"init(rawValue: UInt64)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/rawvalue","title":"var rawValue: UInt64","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/max","title":"static let max: CBOR.NegativeUInt64","type":"property"},{"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/min","title":"static let min: CBOR.NegativeUInt64","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/init(from:)-7qvap","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/==(_:_:)","title":"static func == (CBOR.NegativeUInt64, CBOR.NegativeUInt64) -> Bool","type":"op"}],"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/init(from:)-50tmv","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/negativeuint64","title":"CBOR.NegativeUInt64","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/init(rawvalue:)","title":"init(rawValue: UInt8)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/rawvalue","title":"var rawValue: UInt8","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/init(from:)-11ayu","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/==(_:_:)","title":"static func == (CBOR.SimpleValue, CBOR.SimpleValue) -> Bool","type":"op"}],"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/init(from:)-6dl47","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/simplevalue","title":"CBOR.SimpleValue","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bignum\/init(ispositive:content:)","title":"init(isPositive: Bool, content: Data)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bignum\/content","title":"var content: Data","type":"property"},{"path":"\/documentation\/cborcoding\/cbor\/bignum\/ispositive","title":"var isPositive: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bignum\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/bignum\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bignum\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/bignum\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bignum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/cborcoding\/cbor\/bignum\/==(_:_:)","title":"static func == (CBOR.Bignum, CBOR.Bignum) -> Bool","type":"op"}],"path":"\/documentation\/cborcoding\/cbor\/bignum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/bignum","title":"CBOR.Bignum","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/init(exponent:mantissa:)","title":"init(exponent: I1, mantissa: I2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/exponent","title":"var exponent: I1","type":"property"},{"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/mantissa","title":"var mantissa: I2","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/==(_:_:)","title":"static func == (CBOR.DecimalFraction<I1, I2>, CBOR.DecimalFraction<I1, I2>) -> Bool","type":"op"}],"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/decimalfraction","title":"CBOR.DecimalFraction","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/init(exponent:mantissa:)","title":"init(exponent: I1, mantissa: I2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/exponent","title":"var exponent: I1","type":"property"},{"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/mantissa","title":"var mantissa: I2","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/==(_:_:)","title":"static func == (CBOR.Bigfloat<I1, I2>, CBOR.Bigfloat<I1, I2>) -> Bool","type":"op"}],"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/bigfloat","title":"CBOR.Bigfloat","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray\/init(wrapping:)","title":"init(wrapping: [Element])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray\/array","title":"var array: [Element]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray\/==(_:_:)","title":"static func == (CBOR.IndefiniteLengthArray<Element>, CBOR.IndefiniteLengthArray<Element>) -> Bool","type":"op"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray","title":"CBOR.IndefiniteLengthArray","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap\/init(wrapping:)","title":"init(wrapping: [Key : Value])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap\/map","title":"var map: [Key : Value]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap\/==(_:_:)","title":"static func == (CBOR.IndefiniteLengthMap<Key, Value>, CBOR.IndefiniteLengthMap<Key, Value>) -> Bool","type":"op"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap","title":"CBOR.IndefiniteLengthMap","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/init(wrapping:)","title":"init(wrapping: [Data])","type":"init"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/init(wrapping:chunksize:)","title":"init(wrapping: Data, chunkSize: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/chunks","title":"var chunks: [Data]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/==(_:_:)","title":"static func == (CBOR.IndefiniteLengthData, CBOR.IndefiniteLengthData) -> Bool","type":"op"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata","title":"CBOR.IndefiniteLengthData","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/init(wrapping:)","title":"init(wrapping: [String])","type":"init"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/init(wrapping:chunksize:)","title":"init(wrapping: String, chunkSize: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/chunks","title":"var chunks: [Data]","type":"property"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/stringvalue","title":"var stringValue: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/stringvalue(as:)","title":"func stringValue(as: String.Encoding) -> String?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/==(_:_:)","title":"static func == (CBOR.IndefiniteLengthString, CBOR.IndefiniteLengthString) -> Bool","type":"op"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring","title":"CBOR.IndefiniteLengthString","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/cborencoded\/init(encodeddata:)","title":"init(encodedData: Data)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/cborencoded\/encodeddata","title":"let encodedData: Data","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/cborencoded\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/cborencoded\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/cborencoded","title":"CBOR.CBOREncoded","type":"struct"},{"title":"Namespaces","type":"groupMarker"},{"children":[{"title":"CBOR Types","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/undefined\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/undefined\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/undefined\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/undefined\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/undefined","title":"CBOR.Undefined","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/init(rawvalue:)","title":"init(rawValue: UInt64)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/rawvalue","title":"var rawValue: UInt64","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/max","title":"static let max: CBOR.NegativeUInt64","type":"property"},{"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/min","title":"static let min: CBOR.NegativeUInt64","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/init(from:)-7qvap","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/==(_:_:)","title":"static func == (CBOR.NegativeUInt64, CBOR.NegativeUInt64) -> Bool","type":"op"}],"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/init(from:)-50tmv","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/negativeuint64\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/negativeuint64","title":"CBOR.NegativeUInt64","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/init(rawvalue:)","title":"init(rawValue: UInt8)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/rawvalue","title":"var rawValue: UInt8","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/init(from:)-11ayu","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/==(_:_:)","title":"static func == (CBOR.SimpleValue, CBOR.SimpleValue) -> Bool","type":"op"}],"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/init(from:)-6dl47","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/simplevalue\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/simplevalue","title":"CBOR.SimpleValue","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bignum\/init(ispositive:content:)","title":"init(isPositive: Bool, content: Data)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bignum\/content","title":"var content: Data","type":"property"},{"path":"\/documentation\/cborcoding\/cbor\/bignum\/ispositive","title":"var isPositive: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bignum\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/bignum\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bignum\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/bignum\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bignum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/cborcoding\/cbor\/bignum\/==(_:_:)","title":"static func == (CBOR.Bignum, CBOR.Bignum) -> Bool","type":"op"}],"path":"\/documentation\/cborcoding\/cbor\/bignum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/bignum","title":"CBOR.Bignum","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/init(exponent:mantissa:)","title":"init(exponent: I1, mantissa: I2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/exponent","title":"var exponent: I1","type":"property"},{"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/mantissa","title":"var mantissa: I2","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/==(_:_:)","title":"static func == (CBOR.DecimalFraction<I1, I2>, CBOR.DecimalFraction<I1, I2>) -> Bool","type":"op"}],"path":"\/documentation\/cborcoding\/cbor\/decimalfraction\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/decimalfraction","title":"CBOR.DecimalFraction","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/init(exponent:mantissa:)","title":"init(exponent: I1, mantissa: I2)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/exponent","title":"var exponent: I1","type":"property"},{"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/mantissa","title":"var mantissa: I2","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/==(_:_:)","title":"static func == (CBOR.Bigfloat<I1, I2>, CBOR.Bigfloat<I1, I2>) -> Bool","type":"op"}],"path":"\/documentation\/cborcoding\/cbor\/bigfloat\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/bigfloat","title":"CBOR.Bigfloat","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray\/init(wrapping:)","title":"init(wrapping: [Element])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray\/array","title":"var array: [Element]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray\/==(_:_:)","title":"static func == (CBOR.IndefiniteLengthArray<Element>, CBOR.IndefiniteLengthArray<Element>) -> Bool","type":"op"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengtharray","title":"CBOR.IndefiniteLengthArray","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap\/init(wrapping:)","title":"init(wrapping: [Key : Value])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap\/map","title":"var map: [Key : Value]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap\/==(_:_:)","title":"static func == (CBOR.IndefiniteLengthMap<Key, Value>, CBOR.IndefiniteLengthMap<Key, Value>) -> Bool","type":"op"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthmap","title":"CBOR.IndefiniteLengthMap","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/init(wrapping:)","title":"init(wrapping: [Data])","type":"init"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/init(wrapping:chunksize:)","title":"init(wrapping: Data, chunkSize: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/chunks","title":"var chunks: [Data]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/==(_:_:)","title":"static func == (CBOR.IndefiniteLengthData, CBOR.IndefiniteLengthData) -> Bool","type":"op"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthdata","title":"CBOR.IndefiniteLengthData","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/init(wrapping:)","title":"init(wrapping: [String])","type":"init"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/init(wrapping:chunksize:)","title":"init(wrapping: String, chunkSize: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/chunks","title":"var chunks: [Data]","type":"property"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/stringvalue","title":"var stringValue: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/stringvalue(as:)","title":"func stringValue(as: String.Encoding) -> String?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/==(_:_:)","title":"static func == (CBOR.IndefiniteLengthString, CBOR.IndefiniteLengthString) -> Bool","type":"op"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/indefinitelengthstring","title":"CBOR.IndefiniteLengthString","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/cborencoded\/init(encodeddata:)","title":"init(encodedData: Data)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/cborencoded\/encodeddata","title":"let encodedData: Data","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/cborcoding\/cbor\/cborencoded\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/cborcoding\/cbor\/cborencoded\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/cborcoding\/cbor\/cborencoded","title":"CBOR.CBOREncoded","type":"struct"}],"path":"\/documentation\/cborcoding\/cbor","title":"CBOR","type":"enum"}],"path":"\/documentation\/cborcoding","title":"CBORCoding","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}